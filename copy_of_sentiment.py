# -*- coding: utf-8 -*-
"""Copy of Sentiment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/197n2yFCQ_I7gQIPLplkh3zI8MiFP2UYZ
"""

import re
import numpy as np
import pandas as pd
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
import matplotlib.pyplot as plt

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

!pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d kazanova/sentiment140

from zipfile import ZipFile
dataset='/content/sentiment140.zip'
with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print("The dataset is extracted")

import sklearn

import pandas as pd
import numpy as np
import seaborn as sns
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))



df=pd.read_csv('/content/twitter_data.csv', encoding='ISO-8859-1')
df

column_name=['Target', 'Id', 'Date', 'Flag', 'User', 'Text']
df=pd.read_csv('/content/twitter_data.csv', names=column_name, encoding='ISO-8859-1')
df

df.head()

df.shape

df.isnull().sum()

df['Target'].value_counts()

df.replace({'Target':{4:1}}, inplace=True)

df['Target'].value_counts()

#stemming
port_stem=PorterStemmer()

def stemming(content):
  stemmed_content=re.sub('[^a-zA-Z]', ' ', content)
  stemmed_content=stemmed_content.lower()
  stemmed_content=stemmed_content.split()
  stemmed_content=[port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content=' '.join(stemmed_content)
  return stemmed_content

df['stemmed_content']=df['Text'].apply(stemming)

df.head()

print(df['stemmed_content'])

df['Target']

X=df['stemmed_content'].values
y=df['Target'].values

print(X, y)

#split the data
X_train, X_test, y_train, y_test=train_test_split(X, y, test_size=0.2, stratify=y, random_state=2)

print(X, X_train, X_test)

vectorizer=TfidfVectorizer()
X_train=vectorizer.fit_transform(X_train)
X_test=vectorizer.transform(X_test)

print(y_test)

model=LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

from sklearn.ensemble import RandomForestClassifier

model=RandomForestClassifier(max_iter=1000)
model.fit(X_train, y_train)

X_train_prediction=model.predict(X_train)
accuracy_data=accuracy_score(y_train, X_train_prediction)
print("Accuracy_train_data:", accuracy_data)

X_test_prediction=model.predict(X_test)
accuracy_data=accuracy_score(y_test, X_test_prediction)
print("Accuracy_test_data:", accuracy_data)

#saving trained model
import pickle
filename='regression model_date.sav'
pickle.dump(model, open(filename, 'wb'))

#for new predictions
load_model=pickle.load(open('/content/regression model_date.sav', 'rb'))

X_new=X_test[3]
print(y_test[3])
prediction= model.predict(X_new)
print(prediction)
if (prediction[0]==0):
  print('negative')
else:
  print('positive')







